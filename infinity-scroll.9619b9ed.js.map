{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,S,0BAKA,MACMC,EAAOC,SAASC,cAAc,gBAC9BC,EAAUF,SAASC,cAAc,YAEvC,IAAIE,EAAc,GACdC,EAAO,EACX,MAEMC,EAAQL,SAASC,cAAc,UAI/BK,EAAW,IAAIC,sBAErB,SAA0BC,GACxBA,EAAQC,SAAQC,MAAMC,IACpB,GAAIA,EAAMC,eAAgB,CACxBR,GAAQ,EACR,MAAMS,KAAEA,SAAeC,EAAUV,EAAMD,GACvCY,EAAaF,GAETA,EAAKG,KAAKC,OAfJ,IAewBJ,EAAKG,KAAKC,OAAS,IACnDX,EAASY,UAAUb,GAEnBc,EAAAC,OAAOC,KACL,8D,OAhBM,CACdC,WAAY,UA4DdZ,eAAeI,EAAUS,EAAMC,GAC7B,MAAMC,EAAe,IAAIC,gBAAgB,CACvCC,IAxEY,qCAyEZC,EAAGJ,EACHK,KAAMN,EACNO,SArEY,GAsEZC,WAAY,QACZC,YAAa,aACbC,YAAY,IAGd,aAAa,EAAApC,EAAAqC,SAAM,IAAIT,I,CAGzB,SAASV,EAAaF,GACpB,MAAMsB,EAAStB,EAAKG,KACjBoB,KACCC,GACE,gDACqCA,EAAKC,mGAEHD,EAAKE,sBAAsBF,EAAKG,qHAGrDH,EAAKI,2FAGLJ,EAAKK,8FAGFL,EAAKM,kGAGJN,EAAKO,8FAO9BC,KAAK,IAER3C,EAAQ4C,mBAAmB,YAAaX,GACxCY,EAAeC,S,CAjFjBjD,EAAKkD,iBAAiB,UAEtBvC,eAAwBwC,GACtBA,EAAIC,iBACJ/C,EAAO,EACPF,EAAQkD,UAAY,GAEpBjD,EAAcJ,EAAKsD,SAASC,YAAYC,MAAMC,OAE9C,MAAM3C,KAAEA,SAAeC,EAAUV,EAAMD,GAEvCG,EAASmD,QAAQpD,GAEQ,IAArBQ,EAAKG,KAAKC,QACZE,EAAAC,OAAOsC,QACL,4EAIJ3C,EAAaF,GAETA,EAAKG,KAAKC,OAAS,GACrBE,EAAAC,OAAOuC,QAAQ,oBAAoB9C,EAAK+C,uBAGtC/C,EAAKG,KAAKC,OAnDA,IAmDoBJ,EAAKG,KAAKC,OAAS,IACnDX,EAASY,UAAUb,GAEnBc,EAAAC,OAAOC,KAAK,8D,IAQhBxB,EAAAqC,QAAM2B,SAASC,QAAU,2BAgDzB,MAAMf,EAAiB,IAAIgB,EAAAC,GAAJ,CAAmB,aAAc,CACtDC,aAAc,MACdC,aAAc,IACdC,gBAAiB","sources":["src/infinity-scroll.js"],"sourcesContent":["import axios from 'axios';\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\nimport SimpleLightbox from 'simplelightbox';\nimport 'simplelightbox/dist/simple-lightbox.min.css';\n\nconst API_KEY = '39207627-8a410277f132e49ffdfa9ce97';\nconst form = document.querySelector('.search-form');\nconst gallery = document.querySelector('.gallery');\n\nlet searchQuery = '';\nlet page = 1;\nconst perPage = 40;\n\nconst guard = document.querySelector('.guard');\nconst options = {\n  rootMargin: '400px',\n};\nconst observer = new IntersectionObserver(observerCallback, options);\n\nfunction observerCallback(entries) {\n  entries.forEach(async entry => {\n    if (entry.isIntersecting) {\n      page += 1;\n      const { data } = await fetchData(page, searchQuery);\n      createMarkup(data);\n\n      if (data.hits.length < perPage && data.hits.length > 0) {\n        observer.unobserve(guard);\n\n        Notify.info(\n          \"We're sorry, but you've reached the end of search results.\"\n        );\n      }\n    }\n  });\n}\n\nform.addEventListener('submit', onSubmit);\n\nasync function onSubmit(evt) {\n  evt.preventDefault();\n  page = 1;\n  gallery.innerHTML = '';\n\n  searchQuery = form.elements.searchQuery.value.trim();\n\n  const { data } = await fetchData(page, searchQuery);\n\n  observer.observe(guard);\n\n  if (data.hits.length === 0) {\n    Notify.failure(\n      'Sorry, there are no images matching your search query. Please try again.'\n    );\n  }\n\n  createMarkup(data);\n\n  if (data.hits.length > 1) {\n    Notify.success(`Hooray! We found ${data.totalHits} images ðŸ˜Ž`);\n  }\n\n  if (data.hits.length < perPage && data.hits.length > 0) {\n    observer.unobserve(guard);\n\n    Notify.info(\"We're sorry, but you've reached the end of search results.\");\n  }\n\n  // if (data.hits.length === perPage) {\n  //   loadMoreBtn.style.display = 'block';\n  // }\n}\n\naxios.defaults.baseURL = 'https://pixabay.com/api/';\n\nasync function fetchData(page, searchQuery) {\n  const searchParams = new URLSearchParams({\n    key: API_KEY,\n    q: searchQuery,\n    page: page,\n    per_page: perPage,\n    image_type: 'photo',\n    orientation: 'horizontal',\n    safesearch: true,\n  });\n\n  return await axios(`?${searchParams}`);\n}\n\nfunction createMarkup(data) {\n  const markup = data.hits\n    .map(\n      elem =>\n        `\n        <a class=\"gallery-link link\" href=\"${elem.largeImageURL}\">\n        <div class=\"photo-card\">\n          <img width=\"400\" height=\"300\" src=\"${elem.webformatURL}\" alt=\"${elem.tags}\" loading=\"lazy\" />\n          <div class=\"info\">\n            <p class=\"info-item\">\n              <b>Likes: ${elem.likes}</b>\n            </p>\n            <p class=\"info-item\">\n              <b>Views: ${elem.views}</b>\n            </p>\n            <p class=\"info-item\">\n              <b>Comments: ${elem.comments}</b>\n            </p>\n            <p class=\"info-item\">\n              <b>Downloads: ${elem.downloads}</b>\n            </p>\n          </div>\n        </div>\n        </a>\n        `\n    )\n    .join('');\n\n  gallery.insertAdjacentHTML('beforeend', markup);\n  simpleLightBox.refresh();\n}\n\nconst simpleLightBox = new SimpleLightbox('.gallery a', {\n  captionsData: 'alt',\n  captionDelay: 250,\n  captionPosition: 'bottom',\n});\n\n// async function onClickMore() {\n//   page += 1;\n//   const { data } = await fetchData(page, searchQuery);\n//   createMarkup(data);\n\n//   if (data.hits.length < perPage && data.hits.length > 0) {\n//     Notify.info(\"We're sorry, but you've reached the end of search results.\");\n//   }\n// }\n"],"names":["$2shzp","parcelRequire","$dccac61c0825aa4e$var$form","document","querySelector","$dccac61c0825aa4e$var$gallery","$dccac61c0825aa4e$var$searchQuery","$dccac61c0825aa4e$var$page","$dccac61c0825aa4e$var$guard","$dccac61c0825aa4e$var$observer","IntersectionObserver","entries","forEach","async","entry","isIntersecting","data","$dccac61c0825aa4e$var$fetchData","$dccac61c0825aa4e$var$createMarkup","hits","length","unobserve","$iQIUW","Notify","info","rootMargin","page1","searchQuery1","searchParams","URLSearchParams","key","q","page","per_page","image_type","orientation","safesearch","default","markup","map","elem","largeImageURL","webformatURL","tags","likes","views","comments","downloads","join","insertAdjacentHTML","$dccac61c0825aa4e$var$simpleLightBox","refresh","addEventListener","evt","preventDefault","innerHTML","elements","searchQuery","value","trim","observe","failure","success","totalHits","defaults","baseURL","$parcel$interopDefault","$fZKcF","captionsData","captionDelay","captionPosition"],"version":3,"file":"infinity-scroll.9619b9ed.js.map"}